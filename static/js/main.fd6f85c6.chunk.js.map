{"version":3,"sources":["serviceWorker.js","Components/Cards/Card/Card.js","Components/Cards/Cards.js","Components/Header/Searchbox/Searchbox.js","Components/Header/Header.js","Components/Loading/Loading.js","Components/Scroll/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","Cards","robots","map","key","SearchBox","change","type","placeholder","autoComplete","onChange","Header","searchChange","Loading","props","Scroll","style","overflowY","border","height","children","App","state","searchValue","onSearchChange","e","setState","target","value","fetch","then","response","json","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCNSC,EAVF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,GAAhB,OACX,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,qBAAgBF,EAAhB,QAA0BG,IAAKL,IACvC,6BACE,4BAAKA,GACL,2BAAIC,MCIKK,EARD,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACZ,6BACGA,EAAOC,KAAI,gBAAGP,EAAH,EAAGA,MAAOD,EAAV,EAAUA,KAAME,EAAhB,EAAgBA,GAAhB,OACV,kBAAC,EAAD,CAAMA,GAAIA,EAAIO,IAAKP,EAAIF,KAAMA,EAAMC,MAAOA,SCSjCS,EAbG,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAChB,yBAAKR,UAAU,OACb,2BACEA,UAAU,mCACVS,KAAK,SACLZ,KAAK,SACLa,YAAY,gBACZC,aAAa,MACbC,SAAUJ,MCCDK,G,MAPA,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OACb,gCACE,wBAAId,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWQ,OAAQM,OCARC,G,MAJC,SAAAC,GACd,OAAO,yBAAKhB,UAAU,aCYTiB,EAdA,SAAAD,GACb,OACE,yBACEE,MAAO,CACLC,UAAW,OACXC,OAAQ,kBACRC,OAAQ,SAGTL,EAAMM,WCmCEC,E,2MAtCbC,MAAQ,CACNpB,OAAQ,GACRqB,YAAa,I,EASfC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CACZH,YAAaE,EAAEE,OAAOC,S,mFARL,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA5B,GAAM,OAAI,EAAKwB,SAAS,CAAExB,gB,+BAS1B,IAAD,OACD+B,EAAiBC,KAAKZ,MAAMpB,OAAOiC,QAAO,SAAAC,GAAK,OACnDA,EAAMzC,KAAK0C,cAAcC,SAAS,EAAKhB,MAAMC,gBAG/C,OACE,yBAAKzB,UAAU,MACb,kBAAC,EAAD,CAAQc,aAAcsB,KAAKV,iBAE1BU,KAAKZ,MAAMpB,OAAOqC,OAAS,EAC1B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOrC,OAAQ+B,KAGjB,kBAAC,EAAD,W,GAhCQO,a,MCClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SRyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.fd6f85c6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => (\r\n  <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n    <img src={`./Robohash/${id}.png`} alt={name} />\r\n    <div>\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card/Card\";\r\n\r\nconst Cards = ({ robots }) => (\r\n  <div>\r\n    {robots.map(({ email, name, id }) => (\r\n      <Card id={id} key={id} name={name} email={email} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ change }) => (\r\n  <div className=\"pa2\">\r\n    <input\r\n      className=\"pa3 ba b--green bg-lightest-blue\"\r\n      type=\"search\"\r\n      name=\"search\"\r\n      placeholder=\"Search Robots\"\r\n      autoComplete=\"off\"\r\n      onChange={change}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport SearchBox from \"./Searchbox/Searchbox\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = ({ searchChange }) => (\r\n  <header>\r\n    <h1 className=\"f1\">RoboFriends</h1>\r\n    <SearchBox change={searchChange} />\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Loading.css\";\r\n\r\nconst Loading = props => {\r\n  return <div className=\"loader\"></div>;\r\n};\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"auto\",\r\n        border: \"5px solid black\",\r\n        height: \"80vh\"\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Cards from \"../Components/Cards/Cards\";\r\nimport Header from \"../Components/Header/Header\";\r\nimport Loading from \"../Components/Loading/Loading\";\r\nimport Scroll from \"../Components/Scroll/Scroll\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    robots: [],\r\n    searchValue: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(robots => this.setState({ robots }));\r\n  }\r\n\r\n  onSearchChange = e => {\r\n    this.setState({\r\n      searchValue: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter(robot =>\r\n      robot.name.toLowerCase().includes(this.state.searchValue)\r\n    );\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <Header searchChange={this.onSearchChange} />\r\n        {/* <Cards robots={filteredRobots} /> */}\r\n        {this.state.robots.length > 0 ? (\r\n          <Scroll>\r\n            <Cards robots={filteredRobots} />\r\n          </Scroll>\r\n        ) : (\r\n          <Loading />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}